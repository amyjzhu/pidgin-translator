/* PidginParser.java */
/* Generated By:JavaCC: Do not edit this line. PidginParser.java */
package parser;

import java.util.ArrayList;
import java.util.List;
import parser.parsetree.*;
import util.*;
import java.util.Collections;

public class PidginParser implements PidginParserConstants {

    final public Program Program() throws ParseException {List<Expression> expressions = new ArrayList();
        Expression e;
        Policy p;
        label_1:
        while (true) {
            if (jj_2_1(2)) {
                ;
            } else {
                break label_1;
            }
            e = Expression();
            expressions.add(e);
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IN:
            case AND:{
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case IN:{
                        jj_consume_token(IN);
                        break;
                    }
                    case AND:{
                        jj_consume_token(AND);
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
                break;
            }
            default:
                jj_la1[1] = jj_gen;
                ;
        }
        p = Policy();
        jj_consume_token(0);
        {if ("" != null) return new Program(expressions, p);}
        throw new Error("Missing return statement in function");
    }

    final public Policy Policy() throws ParseException {// TODO what is this p(A_0, ... A_n) variant?
        Expression e, e2;
        List<Expression> es = new ArrayList();
        e = Expression();
        es.add(e);
        label_2:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case IN:{
                    ;
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_2;
            }
            jj_consume_token(IN);
            e2 = Expression();
            es.add(e2);
        }
        jj_consume_token(ISEMPTY);
        {if ("" != null) return new IsEmpty(es);}
        throw new Error("Missing return statement in function");
    }

    final public Procedure Procedure() throws ParseException {String i;
        Expression e;
        Boolean isEmpty = false;
        jj_consume_token(LET);
        i = Identifier();
        jj_consume_token(ASSIGN);
        e = Expression();
//if (isEmpty) {
        //    return new IsEmpty(Collections.singletonList(new Procedure(i, e))); } // TODO weird edge case with is empty syntax
        //else  {
        {if ("" != null) return new Procedure(i, e);}
        throw new Error("Missing return statement in function");
    }

// TOOD unsure how this works

    //Type Type() : {
//    Token t;
//} {
//    t= <BOOLEAN> { return new BooleanType(); }
//    | <INT> { return new IntegerType(); }
//}
    final public
    Argument Argument() throws ParseException {EdgeType et;
        NodeType nt;
        String i;
        if (jj_2_2(2)) {
            et = EdgeType();
            {if ("" != null) return et;}
        } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case DEFAULT_T:{
                    nt = NodeType();
                    {if ("" != null) return nt;}
                    break;
                }
                case IDENTIFIER:{
                    i = Identifier();
                    {if ("" != null) return new Var(i);}
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

//Argument JavaExpression() : {
//    String i;
// }{
//// TODO how to handle? parse like a regular string I guess
//    i = Identifier() { is.add(i); } (i = Identifier() { is.add(i); }) *
//    { return is; }
//}


    // TODO there is no Boolean condition!!
    final public PrimitiveExpression PrimitiveExpression() throws ParseException {Argument e;
        String i;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case FORWARDS:{
                jj_consume_token(FORWARDS);
                jj_consume_token(LPAREN);
                e = Argument();
                jj_consume_token(RPAREN);
                {if ("" != null) return new Forwards(e);}
                break;
            }
            case BACKWARDS:{
                jj_consume_token(BACKWARDS);
                jj_consume_token(LPAREN);
                e = Argument();
                jj_consume_token(RPAREN);
                {if ("" != null) return new Backwards(e);}
                break;
            }
            case REMOVEN:{
                jj_consume_token(REMOVEN);
                jj_consume_token(LPAREN);
                e = Argument();
                jj_consume_token(RPAREN);
                {if ("" != null) return new Remove(true, e);}
                break;
            }
            case REMOVEE:{
                jj_consume_token(REMOVEE);
                jj_consume_token(LPAREN);
                e = Argument();
                jj_consume_token(RPAREN);
                {if ("" != null) return new Remove(false, e);}
                break;
            }
            case FOREXP:{
                jj_consume_token(FOREXP);
                jj_consume_token(LPAREN);
                i = string();
                jj_consume_token(RPAREN);
                {if ("" != null) return new ForExpression(i);}
                break;
            }
            case FORPROC:{
                jj_consume_token(FORPROC);
                jj_consume_token(LPAREN);
                i = Identifier();
                jj_consume_token(RPAREN);
                {if ("" != null) return new ForProcedure(new Var(i));}
                break;
            }
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public EdgeType EdgeType() throws ParseException {
        jj_consume_token(DEFAULT_T);
        {if ("" != null) return EdgeType.DEFAULT;}
        throw new Error("Missing return statement in function");
    }

    final public NodeType NodeType() throws ParseException {
        jj_consume_token(DEFAULT_T);
        {if ("" != null) return NodeType.DEFAULT;}
        throw new Error("Missing return statement in function");
    }

    final public Expression Expression() throws ParseException {Procedure f;
        Expression e, e2, e3;
        List<Expression> eList = new ArrayList();
        List<Expression> eList2 = new ArrayList();
        String i;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case GRAPH:{
                jj_consume_token(GRAPH);
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                    case DOT:{
                        jj_consume_token(DOT);
                        label_3:
                        while (true) {
                            e2 = PrimitiveExpression();
                            eList.add(e2);
                            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                                case FORWARDS:
                                case BACKWARDS:
                                case REMOVEN:
                                case REMOVEE:
                                case FOREXP:
                                case FORPROC:{
                                    ;
                                    break;
                                }
                                default:
                                    jj_la1[5] = jj_gen;
                                    break label_3;
                            }
                        }
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        ;
                }
// todo OR? forProcedure needs to be collected under a label
                if (!eList.isEmpty()) { {if ("" != null) return new parser.parsetree.Graph();} } else { {if ("" != null) return new Graph();} }
                break;
            }
            case IDENTIFIER:{
                i = Identifier();
                {if ("" != null) return new Var(i);}
                break;
            }
            default:
                jj_la1[7] = jj_gen;
                if (jj_2_5(2)) {
                    jj_consume_token(LET);
                    i = Identifier();
                    jj_consume_token(ASSIGN);
                    e = Expression();
                    eList.add(e); eList2.add(e);
                    label_4:
                    while (true) {
                        if (jj_2_3(2)) {
                            ;
                        } else {
                            break label_4;
                        }
                        jj_consume_token(OR);
                        e2 = Expression();
                        eList.add(e2);
                    }
                    label_5:
                    while (true) {
                        if (jj_2_4(2)) {
                            ;
                        } else {
                            break label_5;
                        }
                        jj_consume_token(IN);
                        e3 = Expression();
                        eList2.add(e3);
                    }
                    {if ("" != null) return new Assign(new Var(i), eList2, eList);}
                } else {
                    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                        case LET:{
                            f = Procedure();
                            {if ("" != null) return f;}
                            break;
                        }
                        default:
                            jj_la1[8] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        throw new Error("Missing return statement in function");
    }

    // creates left recursion
// what examples exist?
    final public Expression SetOperation() throws ParseException {Expression e1, e2;
        if (jj_2_6(2)) {
            e1 = Expression();
            jj_consume_token(UNION);
            e2 = Expression();
            {if ("" != null) return new Union(e1, e2);}
        } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case LET:
                case GRAPH:
                case IDENTIFIER:{
                    e1 = Expression();
                    jj_consume_token(INTERSECT);
                    e2 = Expression();
                    {if ("" != null) return new Intersect(e1, e2);}
                    break;
                }
                default:
                    jj_la1[9] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public String Identifier() throws ParseException {Token i;
        i = jj_consume_token(IDENTIFIER);
        {if ("" != null) return i.image;}
        throw new Error("Missing return statement in function");
    }

    // https://stackoverflow.com/questions/11878392/parsing-strings-with-javacc
    final public String string() throws ParseException {StringBuilder builder = new StringBuilder();
        jj_consume_token(QUOTE);
        label_6:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case CHAR:
                case CNTRL_ESC:{
                    ;
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    break label_6;
            }
            getChar(builder);
        }
        jj_consume_token(ENDQUOTE);
        {if ("" != null) return builder.toString();}
        throw new Error("Missing return statement in function");
    }

    /**
     * Match char inside quoted string.
     */
    final public void getChar(StringBuilder builder) throws ParseException {Token t;
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case CHAR:{
                t = jj_consume_token(CHAR);
                break;
            }
            case CNTRL_ESC:{
                t = jj_consume_token(CNTRL_ESC);
                break;
            }
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        if (t.image.length() < 2)
        {
            // CHAR
            builder.append(t.image.charAt(0));
        }
        else if (t.image.length() < 6)
        {
            // ESC
            char c = t.image.charAt(1);
            switch (c)
            {
                case 'b': builder.append((char) 8); break;
                case 'f': builder.append((char) 12); break;
                case 'n': builder.append((char) 10); break;
                case 'r': builder.append((char) 13); break;
                case 't': builder.append((char) 9); break;
                default: builder.append(c);
            }
        }
    }

    private boolean jj_2_1(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_1(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(0, xla); }
    }

    private boolean jj_2_2(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_2(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(1, xla); }
    }

    private boolean jj_2_3(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_3(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(2, xla); }
    }

    private boolean jj_2_4(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_4(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(3, xla); }
    }

    private boolean jj_2_5(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_5(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(4, xla); }
    }

    private boolean jj_2_6(int xla)
    {
        jj_la = xla; jj_lastpos = jj_scanpos = token;
        try { return !jj_3_6(); }
        catch(LookaheadSuccess ls) { return true; }
        finally { jj_save(5, xla); }
    }

    private boolean jj_3R_14()
    {
        if (jj_scan_token(LET)) return true;
        if (jj_3R_9()) return true;
        return false;
    }

    private boolean jj_3_2()
    {
        if (jj_3R_8()) return true;
        return false;
    }

    private boolean jj_3R_10()
    {
        if (jj_scan_token(GRAPH)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_13()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_7()
    {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_10()) {
            jj_scanpos = xsp;
            if (jj_3R_11()) {
                jj_scanpos = xsp;
                if (jj_3_5()) {
                    jj_scanpos = xsp;
                    if (jj_3R_12()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3_6()
    {
        if (jj_3R_7()) return true;
        if (jj_scan_token(UNION)) return true;
        return false;
    }

    private boolean jj_3R_12()
    {
        if (jj_3R_14()) return true;
        return false;
    }

    private boolean jj_3_3()
    {
        if (jj_scan_token(OR)) return true;
        if (jj_3R_7()) return true;
        return false;
    }

    private boolean jj_3_4()
    {
        if (jj_scan_token(IN)) return true;
        if (jj_3R_7()) return true;
        return false;
    }

    private boolean jj_3_1()
    {
        if (jj_3R_7()) return true;
        return false;
    }

    private boolean jj_3R_13()
    {
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private boolean jj_3R_8()
    {
        if (jj_scan_token(DEFAULT_T)) return true;
        return false;
    }

    private boolean jj_3_5()
    {
        if (jj_scan_token(LET)) return true;
        if (jj_3R_9()) return true;
        return false;
    }

    private boolean jj_3R_11()
    {
        if (jj_3R_9()) return true;
        return false;
    }

    private boolean jj_3R_9()
    {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    /** Generated Token Manager. */
    public PidginParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    /** Current token. */
    public Token token;
    /** Next token. */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[12];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }
    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] {0x6000,0x6000,0x2000,0x800000,0x3f0000,0x3f0000,0x0,0x8000,0x1000,0x9000,0xc00,0xc00,};
    }
    private static void jj_la1_init_1() {
        jj_la1_1 = new int[] {0x0,0x0,0x0,0x400,0x0,0x0,0x40,0x400,0x0,0x400,0x0,0x0,};
    }
    final private JJCalls[] jj_2_rtns = new JJCalls[6];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /** Constructor with InputStream. */
    public PidginParser(java.io.InputStream stream) {
        this(stream, null);
    }
    /** Constructor with InputStream and supplied encoding */
    public PidginParser(java.io.InputStream stream, String encoding) {
        try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source = new PidginParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }
    /** Reinitialise. */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor. */
    public PidginParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new PidginParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Constructor with generated Token Manager. */
    public PidginParser(PidginParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /** Reinitialise. */
    public void ReInit(PidginParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 12; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error { }
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0; Token tok = token;
            while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /** Get the next Token. */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt=token.next) == null)
            return (jj_ntk = (token.next=token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
                int[] oldentry = (int[])(it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[45];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 12; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1<<j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1<<j)) != 0) {
                        la1tokens[32+j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 45; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Enable tracing. */
    final public void enable_tracing() {
    }

    /** Disable tracing. */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 6; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0: jj_3_1(); break;
                            case 1: jj_3_2(); break;
                            case 2: jj_3_3(); break;
                            case 3: jj_3_4(); break;
                            case 4: jj_3_5(); break;
                            case 5: jj_3_6(); break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch(LookaheadSuccess ls) { }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) { p = p.next = new JJCalls(); break; }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
