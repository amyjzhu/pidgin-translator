/* Generated By:JavaCC: Do not edit this line. PidginParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PidginParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int QUOTE = 7;
  /** RegularExpression Id. */
  int ENDQUOTE = 9;
  /** RegularExpression Id. */
  int CHAR = 10;
  /** RegularExpression Id. */
  int CNTRL_ESC = 11;
  /** RegularExpression Id. */
  int LET = 12;
  /** RegularExpression Id. */
  int IN = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int GRAPH = 15;
  /** RegularExpression Id. */
  int FORWARDS = 16;
  /** RegularExpression Id. */
  int BACKWARDS = 17;
  /** RegularExpression Id. */
  int REMOVEN = 18;
  /** RegularExpression Id. */
  int REMOVEE = 19;
  /** RegularExpression Id. */
  int FOREXP = 20;
  /** RegularExpression Id. */
  int FORPROC = 21;
  /** RegularExpression Id. */
  int ISEMPTY = 22;
  /** RegularExpression Id. */
  int DEFAULT_T = 23;
  /** RegularExpression Id. */
  int UNION = 24;
  /** RegularExpression Id. */
  int INTERSECT = 25;
  /** RegularExpression Id. */
  int OR = 26;
  /** RegularExpression Id. */
  int LPAREN = 27;
  /** RegularExpression Id. */
  int RPAREN = 28;
  /** RegularExpression Id. */
  int ASSIGN = 29;
  /** RegularExpression Id. */
  int QUESTION = 30;
  /** RegularExpression Id. */
  int COLON = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;
  /** RegularExpression Id. */
  int MULT = 34;
  /** RegularExpression Id. */
  int SMALLER = 35;
  /** RegularExpression Id. */
  int NOT = 36;
  /** RegularExpression Id. */
  int SEMICOLON = 37;
  /** RegularExpression Id. */
  int DOT = 38;
  /** RegularExpression Id. */
  int INT = 39;
  /** RegularExpression Id. */
  int BOOLEAN = 40;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 41;
  /** RegularExpression Id. */
  int IDENTIFIER = 42;
  /** RegularExpression Id. */
  int LETTER = 43;
  /** RegularExpression Id. */
  int DIGIT = 44;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;
  /** Lexical state. */
  int ESC_STATE = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<MULTI_LINE_COMMENT>",
    "<SINGLE_LINE_COMMENT>",
    "\"\\\"\"",
    "\"\\\\\"",
    "<ENDQUOTE>",
    "<CHAR>",
    "<CNTRL_ESC>",
    "\"let\"",
    "\"in\"",
    "\"and\"",
    "\"pdg\"",
    "\"forwardSlice\"",
    "\"backwardSlice\"",
    "\"removeNodes\"",
    "\"removeEdges\"",
    "\"forExpression\"",
    "\"forProcedure\"",
    "\"is empty\"",
    "\"default\"",
    "\"union\"",
    "\"intersect\"",
    "\"or\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"<\"",
    "\"!\"",
    "\";\"",
    "\".\"",
    "\"int\"",
    "\"boolean\"",
    "<INTEGER_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
