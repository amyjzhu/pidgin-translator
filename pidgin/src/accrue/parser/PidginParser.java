
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 16 10:17:18 EDT 2015
//----------------------------------------------------

package accrue.parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import accrue.util.OrderedPair;
import accrue.query.cheat.*;
import accrue.query.expression.*;
import accrue.query.policy.*;
import accrue.query.primitive.*;
import accrue.query.query.*;
import accrue.query.util.*;
import accrue.query.bool.*;
import accrue.query.TopLevel;
import accrue.pdg.node.PDGNodeType;
import accrue.pdg.PDGEdgeType;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 16 10:17:18 EDT 2015
  */
public class PidginParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PidginParser() {super();}

  /** Constructor which sets the default scanner. */
  public PidginParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PidginParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\006\000\002\003\006" +
    "\000\002\004\004\000\002\012\005\000\002\013\005\000" +
    "\002\014\006\000\002\010\003\000\002\011\003\000\002" +
    "\011\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\002\000\002\005\003\000" +
    "\002\005\005\000\002\005\006\000\002\005\003\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\006\000\002\006\007\000\002\006\007\000\002\006\010" +
    "\000\002\006\006\000\002\006\006\000\002\006\006\000" +
    "\002\006\006\000\002\006\006\000\002\006\006\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\005\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\006\012\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\015\003\000\002\016\003\000\002\020" +
    "\003\000\002\020\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\004\000" +
    "\002\025\002\000\002\021\003\000\002\021\003\000\002" +
    "\022\004\000\002\022\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\012\004\004\011\010\042\005\051\006\001" +
    "\002\000\004\051\217\001\002\000\010\011\010\042\005" +
    "\051\006\001\002\000\032\002\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\041\uffe9\042\210" +
    "\043\uffe9\044\uffe9\001\002\000\006\002\001\034\207\001" +
    "\002\000\030\002\uffec\006\uffec\007\uffec\010\uffec\030\uffec" +
    "\031\uffec\033\uffec\034\uffec\041\uffec\043\uffec\044\uffec\001" +
    "\002\000\004\002\206\001\002\000\004\002\uffff\001\002" +
    "\000\014\002\ufffe\007\014\010\015\034\ufffe\044\016\001" +
    "\002\000\010\011\010\042\005\051\006\001\002\000\010" +
    "\011\010\042\005\051\006\001\002\000\050\012\025\013" +
    "\023\014\031\015\020\016\035\017\037\020\017\021\026" +
    "\022\033\023\021\024\040\025\041\026\024\035\027\036" +
    "\036\037\030\040\032\042\042\051\022\001\002\000\004" +
    "\042\201\001\002\000\004\042\176\001\002\000\004\042" +
    "\166\001\002\000\032\002\uffed\006\uffed\007\uffed\010\uffed" +
    "\030\uffed\031\uffed\033\uffed\034\uffed\041\uffed\042\153\043" +
    "\uffed\044\uffed\001\002\000\004\042\147\001\002\000\004" +
    "\042\144\001\002\000\004\042\136\001\002\000\004\042" +
    "\133\001\002\000\004\042\125\001\002\000\004\042\122" +
    "\001\002\000\004\042\115\001\002\000\004\042\106\001" +
    "\002\000\004\042\103\001\002\000\030\002\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\030\uffeb\031\uffeb\033\uffeb\034\uffeb\041" +
    "\uffeb\043\uffeb\044\uffeb\001\002\000\004\042\100\001\002" +
    "\000\004\042\072\001\002\000\004\042\065\001\002\000" +
    "\004\042\050\001\002\000\004\042\045\001\002\000\046" +
    "\012\025\013\023\014\031\015\020\016\035\017\037\020" +
    "\017\021\026\022\033\023\021\024\040\025\041\026\024" +
    "\035\027\036\036\037\030\040\032\042\042\001\002\000" +
    "\004\043\044\001\002\000\030\002\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\041\uffd7\043" +
    "\uffd7\044\uffd7\001\002\000\010\011\010\042\005\051\006" +
    "\001\002\000\012\007\014\010\015\043\047\044\016\001" +
    "\002\000\030\002\uffda\006\uffda\007\uffda\010\uffda\030\uffda" +
    "\031\uffda\033\uffda\034\uffda\041\uffda\043\uffda\044\uffda\001" +
    "\002\000\014\011\010\027\053\032\052\042\005\051\006" +
    "\001\002\000\010\030\057\031\056\043\064\001\002\000" +
    "\014\011\010\027\053\032\052\042\005\051\006\001\002" +
    "\000\014\011\010\027\053\032\052\042\005\051\006\001" +
    "\002\000\020\007\014\010\015\030\uffd2\031\uffd2\033\uffd2" +
    "\043\uffd2\044\016\001\002\000\012\030\uffd1\031\uffd1\033" +
    "\uffd1\043\uffd1\001\002\000\014\011\010\027\053\032\052" +
    "\042\005\051\006\001\002\000\014\011\010\027\053\032" +
    "\052\042\005\051\006\001\002\000\012\030\uffd0\031\uffd0" +
    "\033\uffd0\043\uffd0\001\002\000\012\030\057\031\uffcf\033" +
    "\uffcf\043\uffcf\001\002\000\010\030\057\031\056\033\063" +
    "\001\002\000\012\030\uffce\031\uffce\033\uffce\043\uffce\001" +
    "\002\000\030\002\uffd9\006\uffd9\007\uffd9\010\uffd9\030\uffd9" +
    "\031\uffd9\033\uffd9\034\uffd9\041\uffd9\043\uffd9\044\uffd9\001" +
    "\002\000\012\011\010\042\005\046\066\051\006\001\002" +
    "\000\004\043\uffc9\001\002\000\004\043\071\001\002\000" +
    "\012\007\014\010\015\043\uffc8\044\016\001\002\000\030" +
    "\002\uffdf\006\uffdf\007\uffdf\010\uffdf\030\uffdf\031\uffdf\033" +
    "\uffdf\034\uffdf\041\uffdf\043\uffdf\044\uffdf\001\002\000\012" +
    "\011\010\042\005\047\075\051\006\001\002\000\004\043" +
    "\077\001\002\000\006\041\uffcb\043\uffcb\001\002\000\006" +
    "\041\uffcd\043\uffcd\001\002\000\014\007\014\010\015\041" +
    "\uffca\043\uffca\044\016\001\002\000\030\002\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\041" +
    "\uffd5\043\uffd5\044\uffd5\001\002\000\010\011\010\042\005" +
    "\051\006\001\002\000\012\007\014\010\015\043\102\044" +
    "\016\001\002\000\030\002\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\030\uffe0\031\uffe0\033\uffe0\034\uffe0\041\uffe0\043\uffe0\044" +
    "\uffe0\001\002\000\012\011\010\042\005\047\075\051\006" +
    "\001\002\000\004\043\105\001\002\000\030\002\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc" +
    "\041\uffdc\043\uffdc\044\uffdc\001\002\000\012\011\010\042" +
    "\005\047\075\051\006\001\002\000\004\041\110\001\002" +
    "\000\010\011\010\042\005\051\006\001\002\000\012\007" +
    "\014\010\015\041\112\044\016\001\002\000\010\011\010" +
    "\042\005\051\006\001\002\000\012\007\014\010\015\043" +
    "\114\044\016\001\002\000\030\002\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\041\uffd3\043" +
    "\uffd3\044\uffd3\001\002\000\010\011\010\042\005\051\006" +
    "\001\002\000\012\007\014\010\015\041\117\044\016\001" +
    "\002\000\010\011\010\042\005\051\006\001\002\000\012" +
    "\007\014\010\015\043\121\044\016\001\002\000\030\002" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\034\uffe2\041\uffe2\043\uffe2\044\uffe2\001\002\000\012\011" +
    "\010\042\005\047\075\051\006\001\002\000\004\043\124" +
    "\001\002\000\030\002\uffd4\006\uffd4\007\uffd4\010\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\041\uffd4\043\uffd4\044\uffd4" +
    "\001\002\000\012\011\010\042\005\050\126\051\006\001" +
    "\002\000\004\043\uffcc\001\002\000\004\043\132\001\002" +
    "\000\004\043\uffc3\001\002\000\012\007\014\010\015\043" +
    "\uffc2\044\016\001\002\000\030\002\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\041\uffd6\043" +
    "\uffd6\044\uffd6\001\002\000\012\011\010\042\005\047\075" +
    "\051\006\001\002\000\004\043\135\001\002\000\030\002" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\030\uffdd\031\uffdd\033\uffdd" +
    "\034\uffdd\041\uffdd\043\uffdd\044\uffdd\001\002\000\010\011" +
    "\010\042\005\051\006\001\002\000\014\007\014\010\015" +
    "\041\140\043\uffc0\044\016\001\002\000\012\011\010\042" +
    "\005\050\126\051\006\001\002\000\004\043\142\001\002" +
    "\000\030\002\uffe4\006\uffe4\007\uffe4\010\uffe4\030\uffe4\031" +
    "\uffe4\033\uffe4\034\uffe4\041\uffe4\043\uffe4\044\uffe4\001\002" +
    "\000\004\043\uffc1\001\002\000\014\011\010\027\053\032" +
    "\052\042\005\051\006\001\002\000\010\030\057\031\056" +
    "\043\146\001\002\000\030\002\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\041\uffd8\043\uffd8" +
    "\044\uffd8\001\002\000\010\011\010\042\005\051\006\001" +
    "\002\000\014\007\014\010\015\041\140\043\uffc0\044\016" +
    "\001\002\000\004\043\152\001\002\000\030\002\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3" +
    "\041\uffe3\043\uffe3\044\uffe3\001\002\000\016\011\010\042" +
    "\005\045\156\046\161\047\075\051\006\001\002\000\030" +
    "\002\uffe5\006\uffe5\007\uffe5\010\uffe5\030\uffe5\031\uffe5\033" +
    "\uffe5\034\uffe5\041\uffe5\043\uffe5\044\uffe5\001\002\000\006" +
    "\041\ufff4\043\ufff4\001\002\000\006\041\ufff2\043\ufff2\001" +
    "\002\000\014\007\014\010\015\041\ufff3\043\ufff3\044\016" +
    "\001\002\000\004\043\165\001\002\000\006\041\ufff1\043" +
    "\ufff1\001\002\000\006\041\163\043\uffef\001\002\000\016" +
    "\011\010\042\005\045\156\046\161\047\075\051\006\001" +
    "\002\000\004\043\ufff0\001\002\000\030\002\uffee\006\uffee" +
    "\007\uffee\010\uffee\030\uffee\031\uffee\033\uffee\034\uffee\041" +
    "\uffee\043\uffee\044\uffee\001\002\000\010\011\010\042\005" +
    "\051\006\001\002\000\014\007\014\010\015\041\170\043" +
    "\uffc4\044\016\001\002\000\012\011\010\042\005\045\173" +
    "\051\006\001\002\000\004\043\172\001\002\000\030\002" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\030\uffdb\031\uffdb\033\uffdb" +
    "\034\uffdb\041\uffdb\043\uffdb\044\uffdb\001\002\000\004\043" +
    "\uffc7\001\002\000\004\043\uffc5\001\002\000\012\007\014" +
    "\010\015\043\uffc6\044\016\001\002\000\010\011\010\042" +
    "\005\051\006\001\002\000\012\007\014\010\015\043\200" +
    "\044\016\001\002\000\030\002\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\041\uffe1\043\uffe1" +
    "\044\uffe1\001\002\000\012\011\010\042\005\045\173\051" +
    "\006\001\002\000\004\043\203\001\002\000\030\002\uffde" +
    "\006\uffde\007\uffde\010\uffde\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\041\uffde\043\uffde\044\uffde\001\002\000\030\002\uffe8" +
    "\006\uffe8\007\014\010\uffe8\030\uffe8\031\uffe8\033\uffe8\034" +
    "\uffe8\041\uffe8\043\uffe8\044\016\001\002\000\030\002\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\030\uffe7\031\uffe7\033\uffe7\034" +
    "\uffe7\041\uffe7\043\uffe7\044\016\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffb\001\002\000\016\011\010\042" +
    "\005\045\156\046\161\047\075\051\006\001\002\000\004" +
    "\043\212\001\002\000\030\002\uffea\006\uffea\007\uffea\010" +
    "\uffea\030\uffea\031\uffea\033\uffea\034\uffea\041\uffea\043\uffea" +
    "\044\uffea\001\002\000\012\007\014\010\015\043\214\044" +
    "\016\001\002\000\030\002\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\034\uffe6\041\uffe6\043\uffe6\044" +
    "\uffe6\001\002\000\004\006\236\001\002\000\004\006\234" +
    "\001\002\000\006\005\223\042\224\001\002\000\004\005" +
    "\221\001\002\000\010\011\010\042\005\051\006\001\002" +
    "\000\012\006\ufff9\007\014\010\015\044\016\001\002\000" +
    "\010\011\010\042\005\051\006\001\002\000\004\051\227" +
    "\001\002\000\006\041\ufff6\043\ufff6\001\002\000\006\041" +
    "\230\043\231\001\002\000\006\041\ufff7\043\ufff7\001\002" +
    "\000\004\051\227\001\002\000\004\005\ufff8\001\002\000" +
    "\006\041\ufff5\043\ufff5\001\002\000\012\006\ufffa\007\014" +
    "\010\015\044\016\001\002\000\012\004\004\011\010\042" +
    "\005\051\006\001\002\000\006\002\ufffc\034\ufffc\001\002" +
    "\000\012\004\004\011\010\042\005\051\006\001\002\000" +
    "\006\002\ufffd\034\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\012\002\010\003\006\004\011\005\012\001" +
    "\001\000\010\012\214\013\215\014\217\001\001\000\004" +
    "\005\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\204\001\001\000\004\005\203\001" +
    "\001\000\004\006\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\053" +
    "\007\050\001\001\000\002\001\001\000\006\005\053\007" +
    "\061\001\001\000\006\005\053\007\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\053\007\060\001" +
    "\001\000\006\005\053\007\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\067\023\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\075\015\073\020\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\075\015\073\020" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\075\015\073\020\106\001\001\000\002\001\001\000" +
    "\004\005\110\001\001\000\002\001\001\000\004\005\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\115\001\001\000\002\001\001\000\004\005\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\075\015" +
    "\073\020\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\130\016\127\021\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\075\015\073\020\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\136" +
    "\001\001\000\004\022\140\001\001\000\010\005\130\016" +
    "\127\021\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\053\007\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\147\001\001" +
    "\000\004\022\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\156\015\154\017\161\026\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\156\015\154\017\161\026\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\166" +
    "\001\001\000\004\025\170\001\001\000\006\005\174\024" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\174\024\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\156\015\154\017\161\026" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\221" +
    "\001\001\000\002\001\001\000\004\005\232\001\001\000" +
    "\006\010\224\011\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\234\005\012\001\001\000\002\001\001\000\006\003" +
    "\236\005\012\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PidginParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PidginParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PidginParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    PidginLexer lexer;
    Map<String,Integer> arities = new LinkedHashMap<String,Integer>();

    public PidginParser(InputStream str) {
        super(new PidginLexer(str));
        lexer = (PidginLexer)getScanner();
    }
    
    public PidginParser(Reader r) {
          super( new PidginLexer(r) );
          lexer = (PidginLexer)getScanner();
      }

    public static TopLevel parse(String query) throws Exception {
        StringReader reader = new StringReader(query);
        PidginParser p = new PidginParser(reader);
        return (TopLevel) p.parse().value;  
    }

    public void report_error(String message) {
        throw new RuntimeException("Parser error: " + message);
    }

    public void report_error(String message, Object info) {
        if ( !(info instanceof Symbol) ) report_error(message);
        Symbol symbol = (Symbol) info;
        String val = (symbol.value == null) ? "NO VALUE" : symbol.value.toString();
        if ( symbol.left < 0 || symbol.right < 0 ) report_error(message + ", symbol was \"" + val +"\"");
        
        throw new RuntimeException("Parse error at line " + symbol.left + ", column " + symbol.right + ": " + message + ", symbol was \"" + val + "\"");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PidginParser$actions {
  private final PidginParser parser;

  /** Constructor */
  CUP$PidginParser$actions(PidginParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PidginParser$do_action(
    int                        CUP$PidginParser$act_num,
    java_cup.runtime.lr_parser CUP$PidginParser$parser,
    java.util.Stack            CUP$PidginParser$stack,
    int                        CUP$PidginParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PidginParser$result;

      /* select the action based on the action number */
      switch (CUP$PidginParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // optional_int ::= 
            {
              Argument< ? > RESULT =null;
		 RESULT = Argument.absent(); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("optional_int",16, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optional_int ::= COMMA int_arg 
            {
              Argument< ? > RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("optional_int",16, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // int_arg ::= expression 
            {
              Argument< ? > RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 
         if (!(e instanceof Variable)) {
            parser.report_error("Passing non-variable expression: " + e + ". Integer was expected.", e);
         }
         RESULT = new Argument<Expression>(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("int_arg",15, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // int_arg ::= base_int_arg 
            {
              Argument< ? > RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument<Integer> i = (Argument<Integer>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = i; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("int_arg",15, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // optional_et ::= 
            {
              Argument< ? > RESULT =null;
		 RESULT = Argument.absent(); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("optional_et",19, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // optional_et ::= COMMA et_arg 
            {
              Argument< ? > RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = a; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("optional_et",19, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // et_arg ::= expression 
            {
              Argument< ? > RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 
         if (!(e instanceof Variable)) {
            parser.report_error("Passing non-variable expression: " + e + ". EdgeType was expected.", e);
         }
         RESULT = new Argument<Expression>(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("et_arg",18, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // et_arg ::= EDGE_TYPE 
            {
              Argument< ? > RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		PDGEdgeType et = (PDGEdgeType)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<PDGEdgeType>(et); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("et_arg",18, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // nt_arg ::= expression 
            {
              Argument< ? > RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 
         if (!(e instanceof Variable)) {
            parser.report_error("Passing non-variable expression: " + e + ". NodeType was expected.", e);
         }
         RESULT = new Argument<Expression>(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("nt_arg",17, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // nt_arg ::= NODE_TYPE 
            {
              Argument< ? > RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		PDGNodeType nt = (PDGNodeType)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<PDGNodeType>(nt); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("nt_arg",17, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // str_arg ::= expression 
            {
              Argument< ? > RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 
         if (!(e instanceof Variable)) {
            parser.report_error("Passing non-variable expression: " + e + ". String was expected.", e);
         }
         RESULT = new Argument<Expression>(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("str_arg",14, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // str_arg ::= base_str_arg 
            {
              Argument< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument<String> s = (Argument<String>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("str_arg",14, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // base_int_arg ::= INT_LITERAL 
            {
              Argument<Integer> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<Integer>(Integer.parseInt(i)); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("base_int_arg",12, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // base_str_arg ::= STRING_LITERAL 
            {
              Argument<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<String>(s); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("base_str_arg",11, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // boolean_expression ::= LBRACK boolean_expression RBRACK 
            {
              BooleanExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		BooleanExpression b = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = b; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boolean_expression ::= boolean_expression BOOL_OR boolean_expression 
            {
              BooleanExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		BooleanExpression b1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		BooleanExpression b2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new BooleanOr(b1,b2); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_expression ::= boolean_expression BOOL_AND boolean_expression 
            {
              BooleanExpression RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		BooleanExpression b1 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		BooleanExpression b2 = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new BooleanAnd(b1,b2); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_expression ::= BOOL_NOT boolean_expression 
            {
              BooleanExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		BooleanExpression b = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new BooleanNot(b); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolean_expression ::= expression 
            {
              BooleanExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new BooleanVariable(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("boolean_expression",5, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // primitive ::= RESTRICT LPAR str_arg COMMA expression COMMA expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-5)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-5)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).right;
		Expression ins = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).value;
		int outsleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int outsright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression outs = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new Restrict(a, ins, outs); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-7)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // primitive ::= NODES_IN_CONTEXT LPAR str_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new NodesInContext(a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // primitive ::= POSITION LPAR str_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new Position(a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primitive ::= NODE_BY_ID LPAR int_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new NodeByID(a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primitive ::= LPAR primitive RPAR 
            {
              PrimitiveExpression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		PrimitiveExpression p = (PrimitiveExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = p; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primitive ::= FIND_PC_NODES LPAR boolean_expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		BooleanExpression b = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new FindPCNodes(b); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primitive ::= REMOVE_GUARDED_BY_BOOL LPAR boolean_expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		BooleanExpression b = (BooleanExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new RemoveGuardedByBool(b); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primitive ::= REMOVE_GUARDED_BY_PC LPAR expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new RemoveGuardedByPC(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // primitive ::= REMOVE_GUARDED_BY LPAR expression optional_et RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > et = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new RemoveGuardedBy(e,et); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-4)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // primitive ::= FOR_PROCEDURE LPAR str_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new ForProcedure(a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // primitive ::= FOR_EXPRESSION LPAR str_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new ForExpression(a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // primitive ::= SELECT_EDGES LPAR et_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > et = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new SelectEdges(et); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // primitive ::= SELECT_NODES LPAR nt_arg RPAR 
            {
              PrimitiveExpression RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > nt = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new SelectNodes(nt); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // primitive ::= REMOVE_EDGES LPAR expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new RemoveEdges(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primitive ::= REMOVE_NODES LPAR expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new RemoveNodes(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primitive ::= SHORTEST_PATH LPAR expression COMMA expression RPAR 
            {
              PrimitiveExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new ShortestPath(e1, e2); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-5)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primitive ::= BACKWARD_SLICE LPAR expression optional_int RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > d = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new BackwardSlice(e, d); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-4)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive ::= FORWARD_SLICE LPAR expression optional_int RPAR 
            {
              PrimitiveExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Argument< ? > d = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new ForwardSlice(e, d); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("primitive",4, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-4)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression DOT IDENTIFIER dot_args 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		LinkedList<Argument< ? >> as = (LinkedList<Argument< ? >>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 if (!parser.arities.containsKey(i)) {
                        parser.report_error("Function not found (called using dot): " + i, as);
                   } else if(!parser.arities.get(i).equals(as.size() + 1)) {
                        parser.report_error("Calling \"" + i + "\" (with dot) with the wrong number of arguments. Expected: " + parser.arities.get(i) + " Got: " + (as.size() + 1), as);
                   } else {
                        as.addFirst(new Argument<Expression>(e));
                        RESULT = new FunctionApplication(i,as); 
                   } 
                
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= LPAR expression RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = e; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Intersection(e1, e2); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Union(e1, e2); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Variable(i); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= IDENTIFIER LPAR args RPAR 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		LinkedList<Argument< ? >> as = (LinkedList<Argument< ? >>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 if (!parser.arities.containsKey(i)) {
                        parser.report_error("Function not found: " + i, as);
                   } else if(!parser.arities.get(i).equals(as.size())) {
                        parser.report_error("Calling \"" + i + "\" with the wrong number of arguments. Expected: " + parser.arities.get(i) + " Got: " + as.size(), as);
                   } else {
                        RESULT = new FunctionApplication(i,as); 
                   } 
                
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression DOT primitive 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		PrimitiveExpression pe = (PrimitiveExpression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new PrimitiveApplication(e, pe); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= PDG 
            {
              Expression RESULT =null;
		 RESULT = new Variable("pdg"); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dot_args ::= 
            {
              LinkedList<Argument< ? >> RESULT =null;
		 RESULT = new LinkedList<Argument<?>>(); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("dot_args",21, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dot_args ::= LPAR args RPAR 
            {
              LinkedList<Argument< ? >> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		LinkedList<Argument< ? >> as = (LinkedList<Argument< ? >>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = as; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("dot_args",21, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // args ::= arg 
            {
              LinkedList<Argument< ? >> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 LinkedList<Argument<?>> as = new LinkedList<Argument<?>>(); as.add(a); RESULT = as; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // args ::= arg COMMA args 
            {
              LinkedList<Argument< ? >> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		Argument< ? > a = (Argument< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		LinkedList<Argument< ? >> as = (LinkedList<Argument< ? >>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 as.add(0,a); RESULT = as; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arg ::= NODE_TYPE 
            {
              Argument< ? > RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		PDGNodeType nt = (PDGNodeType)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<PDGNodeType>(nt); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("arg",13, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arg ::= EDGE_TYPE 
            {
              Argument< ? > RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		PDGEdgeType et = (PDGEdgeType)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<PDGEdgeType>(et); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("arg",13, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // arg ::= expression 
            {
              Argument< ? > RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new Argument<Expression>(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("arg",13, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // arg ::= base_str_arg 
            {
              Argument< ? > RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Argument<String> s = (Argument<String>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = s; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("arg",13, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formals ::= formals COMMA formal 
            {
              List<String> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		List<String> as = (List<String>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 as.add(f); RESULT = as; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("formals",7, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formals ::= formal 
            {
              List<String> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 List<String> args = new ArrayList<String>();
         args.add(f);
         RESULT = args; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("formals",7, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formal ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = i; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("formal",6, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fun_decl ::= IDENTIFIER LPAR formals RPAR 
            {
              FunctionDecl RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		 RESULT = new FunctionDecl(f,a); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("fun_decl",10, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arg_binder ::= fun_decl EQUALS expression 
            {
              OrderedPair<FunctionDecl,Expression> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		FunctionDecl f = (FunctionDecl)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		  parser.arities.put(f.getName(),f.getArgs().size());
                 RESULT = new OrderedPair<FunctionDecl,Expression>(f,e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("arg_binder",9, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // binder ::= IDENTIFIER EQUALS expression 
            {
              OrderedPair<String,Expression> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		   parser.arities.put(i,0);
              RESULT = new OrderedPair<String,Expression>(i,e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("binder",8, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // policy ::= query IS_EMPTY 
            {
              Policy RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		  RESULT = new IsEmpty(q); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("policy",2, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // query ::= LET arg_binder IN query 
            {
              Query RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		OrderedPair<FunctionDecl,Expression> b = (OrderedPair<FunctionDecl,Expression>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		  RESULT = new LetFun(b.fst(),b.snd(),q); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // query ::= LET binder IN query 
            {
              Query RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).right;
		OrderedPair<String,Expression> b = (OrderedPair<String,Expression>)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		  RESULT = new Let(b.fst(),b.snd(),q); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-3)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // query ::= expression 
            {
              Query RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = new ExpressionQuery(e); 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top ::= policy 
            {
              TopLevel< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Policy p = (Policy)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = p; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("top",0, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).right;
		TopLevel< ? > start_val = (TopLevel< ? >)((java_cup.runtime.Symbol) CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)).value;
		RESULT = start_val;
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.elementAt(CUP$PidginParser$top-1)), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PidginParser$parser.done_parsing();
          return CUP$PidginParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // top ::= query 
            {
              TopLevel< ? > RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()).right;
		Query q = (Query)((java_cup.runtime.Symbol) CUP$PidginParser$stack.peek()).value;
		 RESULT = q; 
              CUP$PidginParser$result = parser.getSymbolFactory().newSymbol("top",0, ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PidginParser$stack.peek()), RESULT);
            }
          return CUP$PidginParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}
