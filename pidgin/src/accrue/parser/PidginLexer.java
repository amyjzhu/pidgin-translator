/* The following code was generated by JFlex 1.4.3 on 10/16/15 10:17 AM */

//From root:
//java -jar lib/JFlex.jar -d src/accrue/parser cup/PidginQL.jflex 
package accrue.parser;

import java_cup.runtime.Symbol;
import accrue.pdg.node.PDGNodeType;
import accrue.pdg.PDGEdgeType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/16/15 10:17 AM from the specification file
 * <tt>cup/PidginQL.jflex</tt>
 */
class PidginLexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\0\1\4\1\1\22\0\1\53\1\77\1\71"+
    "\3\0\1\100\1\0\1\73\1\74\1\7\1\0\1\72\1\0\1\75"+
    "\1\6\12\5\1\0\1\3\1\0\1\76\3\0\1\23\1\50\1\52"+
    "\1\25\1\44\1\63\1\47\1\61\1\54\1\67\1\10\1\55\1\64"+
    "\1\24\1\30\1\42\1\10\1\31\1\34\1\57\1\56\1\65\1\70"+
    "\1\62\1\66\1\10\1\102\1\104\1\103\1\0\1\60\1\0\1\22"+
    "\1\36\1\35\1\17\1\12\1\32\1\20\1\41\1\14\1\10\1\37"+
    "\1\11\1\21\1\15\1\26\1\16\1\10\1\27\1\40\1\13\1\46"+
    "\1\43\1\33\1\45\1\51\1\10\1\0\1\101\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\27\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\1\1\14\1\15"+
    "\1\16\1\17\1\20\3\0\1\4\1\21\10\4\1\22"+
    "\31\4\1\23\1\24\1\25\1\26\1\27\1\30\2\0"+
    "\1\31\1\0\1\4\1\32\1\4\1\33\14\4\1\0"+
    "\1\4\1\34\16\4\2\0\20\4\2\0\5\4\1\35"+
    "\3\4\1\36\1\37\4\4\1\0\21\4\2\0\1\4"+
    "\2\0\2\4\1\40\1\4\1\41\1\42\1\4\1\43"+
    "\1\4\1\0\7\4\1\0\4\4\1\44\4\4\7\0"+
    "\5\4\1\0\11\4\2\0\10\4\1\45\7\0\3\4"+
    "\1\0\1\46\1\47\1\4\1\50\1\51\5\4\1\52"+
    "\3\0\10\4\1\53\1\54\6\0\1\4\1\55\2\0"+
    "\1\4\1\0\4\4\3\0\10\4\10\0\1\4\2\0"+
    "\1\4\1\0\4\4\3\0\10\4\5\0\1\56\2\0"+
    "\1\4\2\0\1\4\1\0\1\57\1\60\2\4\1\61"+
    "\1\62\1\0\1\63\4\4\1\64\1\65\1\4\7\0"+
    "\1\66\2\0\1\4\1\0\2\4\1\0\1\67\1\70"+
    "\2\4\1\71\2\0\1\72\1\0\1\73\4\0\1\4"+
    "\1\0\2\4\1\0\1\74\1\75\7\0\1\76\1\0"+
    "\2\4\7\0\1\77\1\0\1\100\1\4\2\0\1\101"+
    "\1\102\1\103\3\0\3\4\1\104\1\105\1\106\1\0"+
    "\1\107\1\110\1\4\1\111\1\4\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\212\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\u07d1\0\u0816\0\212"+
    "\0\212\0\u085b\0\212\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u019e\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97"+
    "\0\u0bdc\0\u019e\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2"+
    "\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\u12de\0\u1323\0\u019e\0\u1368\0\u13ad\0\u019e\0\u13f2"+
    "\0\u019e\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u019e"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08"+
    "\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30"+
    "\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u019e"+
    "\0\u2280\0\u22c5\0\u230a\0\u019e\0\u019e\0\u234f\0\u2394\0\u23d9"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u019e\0\u2b20\0\u019e\0\u019e\0\u2b65\0\u019e"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u019e\0\u2f70"+
    "\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153\0\u3198"+
    "\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0"+
    "\0\u3405\0\u344a\0\u348f\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8"+
    "\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786\0\u37cb\0\u3810"+
    "\0\u3855\0\u389a\0\u38df\0\u019e\0\u3924\0\u3969\0\u39ae\0\u39f3"+
    "\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6\0\u019e"+
    "\0\212\0\u3c1b\0\u019e\0\u019e\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f"+
    "\0\u3d74\0\u019e\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd\0\u3f12"+
    "\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\212\0\212\0\u40b0"+
    "\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e\0\u019e\0\u4293"+
    "\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec\0\u4431\0\u4476\0\u44bb"+
    "\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659\0\u469e\0\u46e3"+
    "\0\u4728\0\u476d\0\u47b2\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b"+
    "\0\u4950\0\u4995\0\u49da\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33"+
    "\0\u4b78\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b"+
    "\0\u4da0\0\u4de5\0\u4e2a\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83"+
    "\0\u4fc8\0\u500d\0\u5052\0\212\0\u5097\0\u50dc\0\u5121\0\u5166"+
    "\0\u51ab\0\u51f0\0\u5235\0\u019e\0\u019e\0\u527a\0\u52bf\0\212"+
    "\0\212\0\u5304\0\u019e\0\u5349\0\u538e\0\u53d3\0\u5418\0\u019e"+
    "\0\u019e\0\u545d\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb"+
    "\0\u5640\0\u019e\0\u5685\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de"+
    "\0\u5823\0\u019e\0\u019e\0\u5868\0\u58ad\0\u019e\0\u58f2\0\u5937"+
    "\0\212\0\u597c\0\212\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5"+
    "\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u019e\0\u019e\0\u5c2e\0\u5c73"+
    "\0\u5cb8\0\u5cfd\0\u5d42\0\u5d87\0\u5dcc\0\u019e\0\u5e11\0\u5e56"+
    "\0\u5e9b\0\u5ee0\0\u5f25\0\u5f6a\0\u5faf\0\u5ff4\0\u6039\0\u607e"+
    "\0\212\0\u60c3\0\u6108\0\u614d\0\u6192\0\u61d7\0\212\0\212"+
    "\0\212\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375\0\212"+
    "\0\212\0\212\0\u63ba\0\212\0\u019e\0\u63ff\0\212\0\u6444"+
    "\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\3\1\5\1\6\1\7\1\3"+
    "\1\10\1\11\2\10\1\12\1\13\1\14\3\10\1\15"+
    "\1\16\2\10\1\17\1\20\1\21\1\10\1\22\1\10"+
    "\1\23\1\10\1\24\1\10\1\25\1\10\1\26\1\10"+
    "\1\27\3\10\1\30\1\10\1\31\1\5\1\32\1\33"+
    "\1\10\1\34\1\3\2\10\1\35\1\36\4\10\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\3\1\52\2\3\66\52\1\53\12\52"+
    "\1\54\107\0\1\55\107\0\1\6\105\0\1\56\1\57"+
    "\102\0\1\10\2\0\43\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\2\10\1\60\40\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\5\10\1\61\22\10"+
    "\1\62\12\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\16\10\1\63\24\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\7\10\1\64\1\65\5\10\1\66"+
    "\24\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\5\10\1\67\35\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\14\10\1\70\23\10\1\71\2\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\17\10\1\72"+
    "\23\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\2\10\1\73\40\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\21\10\1\72\21\10\1\0\2\10\1\74"+
    "\1\75\1\0\10\10\21\0\1\10\2\0\4\10\1\76"+
    "\11\10\1\77\24\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\43\10\1\0\4\10\1\0\7\10\1\100"+
    "\21\0\1\10\2\0\12\10\1\101\30\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\2\10\1\102\26\10"+
    "\1\103\11\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\20\10\1\104\21\10\1\105\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\14\10\1\106\26\10\1\0"+
    "\4\10\1\0\1\10\1\107\6\10\21\0\1\10\2\0"+
    "\13\10\1\110\4\10\1\111\22\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\20\10\1\112\22\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\14\10\1\113"+
    "\26\10\1\0\4\10\1\0\3\10\1\114\4\10\21\0"+
    "\1\10\2\0\20\10\1\115\22\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\21\10\1\116\21\10\1\0"+
    "\4\10\1\0\1\117\7\10\21\0\1\10\2\0\13\10"+
    "\1\120\4\10\1\121\22\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\34\10\1\122\6\10\1\0\1\123"+
    "\3\10\1\0\10\10\114\0\1\124\105\0\1\125\3\0"+
    "\1\52\2\0\66\52\1\0\12\52\14\0\1\126\1\0"+
    "\1\127\11\0\1\130\41\0\1\131\16\0\1\5\101\0"+
    "\1\56\1\4\1\5\102\56\7\132\1\133\75\132\5\0"+
    "\1\10\2\0\3\10\1\134\37\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\43\10\1\135\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\7\10\1\136\33\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\10\10\1\137"+
    "\32\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\11\10\1\137\31\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\30\10\1\140\12\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\7\10\1\141\33\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\15\10\1\141"+
    "\25\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\24\10\1\142\16\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\11\10\1\143\16\10\1\144\12\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\3\10\1\145\1\0\10\10\21\0\1\10\2\0\43\10"+
    "\1\0\4\10\1\0\1\146\7\10\21\0\1\10\2\0"+
    "\5\10\1\147\35\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\17\10\1\150\23\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\43\10\1\0\1\151\3\10"+
    "\1\0\10\10\21\0\1\10\2\0\25\10\1\152\15\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\1\10"+
    "\1\153\41\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\16\10\1\154\24\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\1\155\3\10\1\0"+
    "\10\10\21\0\1\10\2\0\43\10\1\0\4\10\1\156"+
    "\10\10\21\0\1\10\2\0\43\10\1\0\3\10\1\157"+
    "\1\0\10\10\21\0\1\10\2\0\32\10\1\160\10\10"+
    "\1\0\1\161\3\10\1\0\10\10\21\0\1\10\2\0"+
    "\24\10\1\162\16\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\20\10\1\163\22\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\14\10\1\164\15\10\1\165"+
    "\10\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\32\10\1\166\10\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\32\10\1\167\10\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\42\10\1\170\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\43\10\1\0\2\10"+
    "\1\171\1\10\1\0\10\10\21\0\1\10\2\0\43\10"+
    "\1\0\1\172\3\10\1\0\10\10\21\0\1\10\2\0"+
    "\43\10\1\0\1\10\1\173\2\10\1\0\10\10\21\0"+
    "\1\10\2\0\21\10\1\174\21\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\21\10\1\175\21\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\24\10\1\176"+
    "\16\10\1\0\4\10\1\0\10\10\14\0\7\132\1\177"+
    "\75\132\6\0\1\5\1\133\107\0\1\200\77\0\1\10"+
    "\2\0\2\10\1\201\40\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\4\10\1\202\36\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\43\10\1\0\3\10"+
    "\1\203\1\0\10\10\21\0\1\10\2\0\16\10\1\204"+
    "\24\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\3\10\1\205\37\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\32\10\1\206\10\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\34\10\1\207\6\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\7\10\1\210"+
    "\33\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\23\10\1\211\6\10\1\212\1\10\1\213\6\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\3\10\1\214\1\0\10\10\21\0\1\10\2\0\27\10"+
    "\1\215\13\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\2\10\1\216\40\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\17\10\1\217\23\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\14\10\1\220\26\10"+
    "\1\0\4\10\1\0\10\10\44\0\1\221\33\0\1\222"+
    "\25\0\1\10\2\0\21\10\1\223\21\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\43\10\1\0\3\10"+
    "\1\224\1\0\10\10\21\0\1\10\2\0\34\10\1\225"+
    "\6\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\43\10\1\0\1\10\1\226\2\10\1\0\10\10\21\0"+
    "\1\10\2\0\43\10\1\0\4\10\1\0\6\10\1\227"+
    "\1\10\21\0\1\10\2\0\43\10\1\0\4\10\1\0"+
    "\5\10\1\230\2\10\21\0\1\10\2\0\43\10\1\0"+
    "\2\10\1\231\1\10\1\0\10\10\21\0\1\10\2\0"+
    "\43\10\1\0\1\10\1\232\2\10\1\0\10\10\21\0"+
    "\1\10\2\0\13\10\1\233\27\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\34\10\1\234\6\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\24\10\1\235"+
    "\16\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\24\10\1\236\16\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\43\10\1\0\4\10\1\0\3\10\1\237"+
    "\4\10\21\0\1\10\2\0\37\10\1\240\3\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\24\10\1\241"+
    "\16\10\1\0\4\10\1\0\10\10\14\0\6\132\1\5"+
    "\1\177\75\132\21\0\1\242\70\0\1\10\2\0\30\10"+
    "\1\243\7\10\1\244\2\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\3\10\1\245\37\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\21\10\1\246\21\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\33\10"+
    "\1\247\7\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\17\10\1\250\23\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\2\10\1\251\1\10"+
    "\1\0\10\10\21\0\1\10\2\0\21\10\1\252\21\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\32\10"+
    "\1\253\10\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\12\10\1\254\30\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\17\10\1\255\23\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\35\10\1\256\5\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\42\10"+
    "\1\257\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\23\10\1\260\17\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\25\10\1\261\15\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\3\10\1\262\37\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\3\10\1\263\1\0\10\10\73\0\1\264\71\0\1\265"+
    "\45\0\1\10\2\0\43\10\1\0\4\10\1\0\5\10"+
    "\1\266\2\10\21\0\1\10\2\0\43\10\1\0\4\10"+
    "\1\267\10\10\21\0\1\10\2\0\43\10\1\0\4\10"+
    "\1\270\10\10\21\0\1\10\2\0\34\10\1\271\6\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\43\10"+
    "\1\0\2\10\1\272\1\10\1\0\10\10\21\0\1\10"+
    "\2\0\43\10\1\0\3\10\1\273\1\0\10\10\21\0"+
    "\1\10\2\0\43\10\1\0\1\274\3\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\1\10\1\275\2\10"+
    "\1\0\10\10\21\0\1\10\2\0\34\10\1\276\6\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\13\10"+
    "\1\277\27\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\34\10\1\300\6\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\1\301\3\10\1\0"+
    "\10\10\32\0\1\302\73\0\1\10\2\0\43\10\1\0"+
    "\1\303\3\10\1\0\10\10\21\0\1\10\2\0\41\10"+
    "\1\304\1\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\4\10\1\305\36\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\13\10\1\306\27\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\2\10\1\307\40\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\4\10"+
    "\1\310\36\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\43\10\1\0\3\10\1\311\1\0\10\10\21\0"+
    "\1\10\2\0\43\10\1\0\4\10\1\312\10\10\21\0"+
    "\1\10\2\0\42\10\1\313\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\17\10\1\314\23\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\16\10\1\315\24\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\6\10"+
    "\1\316\34\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\43\10\1\0\4\10\1\0\1\317\7\10\21\0"+
    "\1\10\2\0\12\10\1\320\30\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\3\10\1\321\37\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\2\10\1\322"+
    "\40\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\34\10\1\323\6\10\1\0\4\10\1\0\10\10\75\0"+
    "\1\324\54\0\1\325\60\0\1\10\2\0\43\10\1\0"+
    "\4\10\1\326\10\10\37\0\1\327\10\0\1\330\5\0"+
    "\1\331\127\0\1\332\24\0\1\10\2\0\13\10\1\333"+
    "\27\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\14\10\1\334\26\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\42\10\1\335\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\1\10\1\336\2\10"+
    "\1\0\10\10\21\0\1\10\2\0\14\10\1\337\26\10"+
    "\1\0\4\10\1\0\10\10\27\0\1\340\76\0\1\10"+
    "\2\0\5\10\1\341\35\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\43\10\1\0\1\342\3\10\1\0"+
    "\10\10\21\0\1\10\2\0\16\10\1\343\24\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\42\10\1\344"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\14\10"+
    "\1\345\17\10\1\346\2\10\1\347\2\10\1\350\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\25\10\1\351"+
    "\15\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\43\10\1\0\4\10\1\352\10\10\60\0\1\353\45\0"+
    "\1\10\2\0\14\10\1\354\26\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\7\10\1\355\33\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\25\10\1\356"+
    "\15\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\17\10\1\357\23\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\17\10\1\360\23\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\14\10\1\361\17\10\1\362"+
    "\6\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\30\10\1\363\12\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\21\10\1\364\21\10\1\0\4\10\1\0"+
    "\10\10\60\0\1\365\107\0\1\366\77\0\1\367\76\0"+
    "\1\370\126\0\1\371\100\0\1\372\55\0\1\373\66\0"+
    "\1\10\2\0\14\10\1\374\26\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\42\10\1\375\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\43\10\1\0\1\376"+
    "\3\10\1\0\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\4\10\1\377\10\10\21\0\1\10\2\0\37\10\1\u0100"+
    "\3\10\1\0\4\10\1\0\10\10\65\0\1\u0101\40\0"+
    "\1\10\2\0\42\10\1\u0102\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\15\10\1\u0103\25\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\5\10\1\u0104\35\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\43\10"+
    "\1\0\3\10\1\u0105\1\0\10\10\21\0\1\10\2\0"+
    "\16\10\1\u0106\24\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\7\10\1\u0107\33\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\36\10\1\u0108\4\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\16\10\1\u0109"+
    "\24\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\3\10\1\u010a\37\10\1\0\4\10\1\0\10\10\40\0"+
    "\1\u010b\17\0\1\u010c\122\0\1\u010d\27\0\1\10\2\0"+
    "\16\10\1\u010e\24\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\24\10\1\u010f\16\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\2\10\1\u0110\40\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\2\10\1\u0111"+
    "\40\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\7\10\1\u0112\33\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\16\10\1\u0113\24\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\7\10\1\u0114\33\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\3\10\1\u0115"+
    "\37\10\1\0\4\10\1\0\10\10\45\0\1\u0116\117\0"+
    "\1\u0117\112\0\1\u0118\66\0\1\u0119\134\0\1\u011a\100\0"+
    "\1\u011b\101\0\1\u011c\34\0\1\10\2\0\43\10\1\0"+
    "\4\10\1\u011d\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\3\10\1\u011e\1\0\10\10\21\0\1\10\2\0\43\10"+
    "\1\0\3\10\1\u011f\1\0\10\10\37\0\1\u0120\10\0"+
    "\1\u0121\55\0\1\10\2\0\16\10\1\u0122\24\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\43\10\1\0"+
    "\4\10\1\u0123\10\10\21\0\1\10\2\0\7\10\1\u0124"+
    "\33\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\10\10\1\u0125\32\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\12\10\1\u0126\30\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\5\10\1\u0127\35\10\1\0"+
    "\4\10\1\0\10\10\44\0\1\u0128\101\0\1\u0129\121\0"+
    "\1\u012a\47\0\1\10\2\0\7\10\1\u012b\33\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\1\10\1\u012c"+
    "\41\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\7\10\1\u012d\33\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\30\10\1\u012e\12\10\1\0\4\10\1\0"+
    "\10\10\21\0\1\10\2\0\24\10\1\u012f\16\10\1\0"+
    "\4\10\1\0\10\10\21\0\1\10\2\0\7\10\1\u0130"+
    "\33\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\10\10\1\u0131\32\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\32\10\1\u0132\10\10\1\0\4\10\1\0"+
    "\10\10\74\0\1\u0133\100\0\1\u0134\114\0\1\u0135\54\0"+
    "\1\u0136\32\0\1\u0137\73\0\1\u0138\105\0\1\u0139\3\0"+
    "\1\u013a\26\0\1\10\2\0\43\10\1\0\1\u013b\3\10"+
    "\1\0\10\10\50\0\1\u013c\126\0\1\u013d\33\0\1\10"+
    "\2\0\5\10\1\u013e\35\10\1\0\4\10\1\0\10\10"+
    "\71\0\1\u013f\34\0\1\10\2\0\2\10\1\u0140\40\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\2\10"+
    "\1\u0141\40\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\17\10\1\u0142\23\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\3\10\1\u0143\37\10\1\0\4\10"+
    "\1\0\10\10\41\0\1\u0144\126\0\1\u0145\66\0\1\u0146"+
    "\60\0\1\10\2\0\2\10\1\u0147\40\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\4\10\1\u0148\36\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\36\10"+
    "\1\u0149\4\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\30\10\1\u014a\12\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\1\10\1\u014b\41\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\2\10\1\u014c\40\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\2\10"+
    "\1\u014d\40\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\12\10\1\u014e\30\10\1\0\4\10\1\0\10\10"+
    "\50\0\1\u014f\117\0\1\u0150\60\0\1\u0151\137\0\1\u0152"+
    "\56\0\1\u0153\120\0\1\u0154\71\0\1\u0155\76\0\1\u0156"+
    "\66\0\1\10\2\0\20\10\1\u0157\22\10\1\0\4\10"+
    "\1\0\10\10\50\0\1\u0158\134\0\1\u0159\25\0\1\10"+
    "\2\0\3\10\1\u015a\37\10\1\0\4\10\1\0\10\10"+
    "\44\0\1\u015b\61\0\1\10\2\0\30\10\1\u015c\12\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\30\10"+
    "\1\u015d\12\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\7\10\1\u015e\33\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\17\10\1\u015f\23\10\1\0\4\10"+
    "\1\0\10\10\60\0\1\u0160\104\0\1\u0161\104\0\1\u0162"+
    "\45\0\1\10\2\0\30\10\1\u0163\12\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\25\10\1\u0164\15\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\17\10"+
    "\1\u0165\23\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\4\10\1\u0166\36\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\4\10\1\u0167\36\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\30\10\1\u0168\12\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\30\10"+
    "\1\u0169\12\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\3\10\1\u016a\37\10\1\0\4\10\1\0\10\10"+
    "\72\0\1\u016b\52\0\1\u016c\111\0\1\u016d\137\0\1\u016e"+
    "\74\0\1\u016f\106\0\1\u0170\103\0\1\u0171\34\0\1\10"+
    "\2\0\14\10\1\u0172\26\10\1\0\4\10\1\0\10\10"+
    "\70\0\1\u0173\114\0\1\u0174\25\0\1\10\2\0\2\10"+
    "\1\u0175\40\10\1\0\4\10\1\0\10\10\66\0\1\u0176"+
    "\37\0\1\10\2\0\2\10\1\u0177\40\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\16\10\1\u0178\24\10"+
    "\1\0\4\10\1\0\10\10\50\0\1\u0179\55\0\1\10"+
    "\2\0\2\10\1\u017a\40\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\2\10\1\u017b\40\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\16\10\1\u017c\24\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\25\10"+
    "\1\u017d\15\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\31\10\1\u017e\11\10\1\0\4\10\1\0\10\10"+
    "\100\0\1\u017f\104\0\1\u0180\106\0\1\u0181\102\0\1\u0182"+
    "\44\0\1\u0183\124\0\1\u0184\74\0\1\u0185\117\0\1\u0186"+
    "\60\0\1\u0187\66\0\1\10\2\0\35\10\1\u0188\5\10"+
    "\1\0\4\10\1\0\10\10\37\0\1\u0189\66\0\1\10"+
    "\2\0\7\10\1\u018a\33\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\1\10\1\u018b\41\10\1\0\4\10"+
    "\1\0\10\10\50\0\1\u018c\55\0\1\10\2\0\5\10"+
    "\1\u018d\35\10\1\0\4\10\1\0\10\10\21\0\1\10"+
    "\2\0\2\10\1\u018e\40\10\1\0\4\10\1\0\10\10"+
    "\100\0\1\u018f\64\0\1\u0190\63\0\1\u0191\141\0\1\u0192"+
    "\70\0\1\u0193\64\0\1\u0194\111\0\1\u0195\60\0\1\10"+
    "\2\0\3\10\1\u0196\37\10\1\0\4\10\1\0\10\10"+
    "\73\0\1\u0197\32\0\1\10\2\0\40\10\1\u0198\2\10"+
    "\1\0\4\10\1\0\10\10\21\0\1\10\2\0\15\10"+
    "\1\u0199\25\10\1\0\4\10\1\0\10\10\70\0\1\u019a"+
    "\53\0\1\u019b\105\0\1\u019c\111\0\1\u019d\115\0\1\u019e"+
    "\122\0\1\u019f\110\0\1\u01a0\106\0\1\u01a1\72\0\1\u01a2"+
    "\35\0\1\10\2\0\41\10\1\u01a3\1\10\1\0\4\10"+
    "\1\0\10\10\21\0\1\10\2\0\2\10\1\u01a4\40\10"+
    "\1\0\4\10\1\0\10\10\44\0\1\u01a5\105\0\1\u01a6"+
    "\132\0\1\u01a7\113\0\1\u01a8\70\0\1\u01a9\74\0\1\u01aa"+
    "\106\0\1\u01ab\70\0\1\u01ac\61\0\1\10\2\0\32\10"+
    "\1\u01ad\5\10\1\u01ae\2\10\1\0\4\10\1\0\10\10"+
    "\21\0\1\10\2\0\6\10\1\u01af\34\10\1\0\4\10"+
    "\1\0\10\10\40\0\1\u01b0\146\0\1\u01b1\70\0\1\u01b2"+
    "\56\0\1\u01b3\104\0\1\u01b4\65\0\1\10\2\0\42\10"+
    "\1\u01b5\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\16\10\1\u01b6\24\10\1\0\4\10\1\0\10\10\21\0"+
    "\1\10\2\0\30\10\1\u01b5\12\10\1\0\4\10\1\0"+
    "\10\10\73\0\1\u01b7\32\0\1\10\2\0\16\10\1\u01b8"+
    "\24\10\1\0\4\10\1\0\10\10\21\0\1\10\2\0"+
    "\1\10\1\u01b9\41\10\1\0\4\10\1\0\10\10\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25737];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\31\1\7\11\2\1\2\11"+
    "\1\1\1\11\1\1\3\0\44\1\6\11\2\0\1\1"+
    "\1\0\20\1\1\0\20\1\2\0\20\1\2\0\17\1"+
    "\1\0\21\1\2\0\1\1\2\0\11\1\1\0\7\1"+
    "\1\0\11\1\7\0\5\1\1\0\11\1\2\0\11\1"+
    "\7\0\3\1\1\0\1\1\1\11\11\1\3\0\10\1"+
    "\2\11\6\0\2\1\2\0\1\1\1\0\4\1\3\0"+
    "\10\1\10\0\1\1\2\0\1\1\1\0\4\1\3\0"+
    "\10\1\5\0\1\11\2\0\1\1\2\0\1\1\1\0"+
    "\4\1\2\11\1\0\10\1\7\0\1\1\2\0\1\1"+
    "\1\0\2\1\1\0\5\1\2\0\1\11\1\0\1\11"+
    "\4\0\1\1\1\0\2\1\1\0\2\1\7\0\1\1"+
    "\1\0\2\1\7\0\1\11\1\0\2\1\2\0\3\11"+
    "\3\0\3\1\3\11\1\0\1\11\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[441];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    throw new RuntimeException("Invalid token at line " + (yyline+1) + ", column " + (yycolumn+1) + ": " + message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PidginLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PidginLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { return symbol(NODE_TYPE, PDGNodeType.PC_MERGE);
          }
        case 75: break;
        case 53: 
          { return symbol(SELECT_EDGES);
          }
        case 76: break;
        case 68: 
          { return symbol(NODE_TYPE, PDGNodeType.OTHER_EXPRESSION);
          }
        case 77: break;
        case 47: 
          { return symbol(REMOVE_NODES);
          }
        case 78: break;
        case 58: 
          { return symbol(NODE_TYPE, PDGNodeType.EXIT_SUMMARY);
          }
        case 79: break;
        case 70: 
          { return symbol(NODE_TYPE, PDGNodeType.BOOLEAN_FALSE_PC);
          }
        case 80: break;
        case 59: 
          { return symbol(NODE_TYPE, PDGNodeType.EXIT_PC_JOIN);
          }
        case 81: break;
        case 73: 
          { return symbol(NODE_TYPE, PDGNodeType.FORMAL_ASSIGNMENT);
          }
        case 82: break;
        case 42: 
          { return symbol(RESTRICT);
          }
        case 83: break;
        case 38: 
          { return symbol(EDGE_TYPE, PDGEdgeType.MISSING);
          }
        case 84: break;
        case 65: 
          { return symbol(NODE_TYPE, PDGNodeType.EXIT_ASSIGNMENT);
          }
        case 85: break;
        case 61: 
          { return symbol(BACKWARD_SLICE);
          }
        case 86: break;
        case 22: 
          { string.append('\n');
          }
        case 87: break;
        case 24: 
          { string.append('\"');
          }
        case 88: break;
        case 28: 
          { return symbol(EDGE_TYPE, PDGEdgeType.EXP);
          }
        case 89: break;
        case 3: 
          { return symbol(INT_LITERAL, yytext());
          }
        case 90: break;
        case 17: 
          { return symbol(IN);
          }
        case 91: break;
        case 46: 
          { return symbol(NODE_TYPE, PDGNodeType.BASE_VALUE);
          }
        case 92: break;
        case 19: 
          { return symbol(BOOL_AND);
          }
        case 93: break;
        case 18: 
          { return symbol(OR);
          }
        case 94: break;
        case 23: 
          { string.append('\r');
          }
        case 95: break;
        case 5: 
          { string.setLength(0); yybegin(STRING);
          }
        case 96: break;
        case 45: 
          { return symbol(EDGE_TYPE, PDGEdgeType.IMPLICIT);
          }
        case 97: break;
        case 55: 
          { return symbol(FORWARD_SLICE);
          }
        case 98: break;
        case 11: 
          { return symbol(BOOL_NOT);
          }
        case 99: break;
        case 21: 
          { string.append('\t');
          }
        case 100: break;
        case 8: 
          { return symbol(RPAR);
          }
        case 101: break;
        case 48: 
          { return symbol(REMOVE_EDGES);
          }
        case 102: break;
        case 51: 
          { return symbol(FIND_PC_NODES);
          }
        case 103: break;
        case 43: 
          { return symbol(NODE_TYPE, PDGNodeType.PC_OTHER);
          }
        case 104: break;
        case 36: 
          { return symbol(EDGE_TYPE, PDGEdgeType.SWITCH);
          }
        case 105: break;
        case 7: 
          { return symbol(LPAR);
          }
        case 106: break;
        case 39: 
          { return symbol(IS_EMPTY);
          }
        case 107: break;
        case 35: 
          { return symbol(EDGE_TYPE, PDGEdgeType.MERGE);
          }
        case 108: break;
        case 69: 
          { return symbol(NODE_TYPE, PDGNodeType.ENTRY_PC_SUMMARY);
          }
        case 109: break;
        case 10: 
          { return symbol(EQUALS);
          }
        case 110: break;
        case 60: 
          { return symbol(FOR_EXPRESSION);
          }
        case 111: break;
        case 30: 
          { return symbol(EDGE_TYPE, PDGEdgeType.TRUE);
          }
        case 112: break;
        case 71: 
          { return symbol(NODE_TYPE, PDGNodeType.ABSTRACT_LOCATION);
          }
        case 113: break;
        case 50: 
          { return symbol(EDGE_TYPE, PDGEdgeType.OUTPUT);
          }
        case 114: break;
        case 64: 
          { return symbol(REMOVE_GUARDED_BY);
          }
        case 115: break;
        case 34: 
          { return symbol(EDGE_TYPE, PDGEdgeType.FALSE);
          }
        case 116: break;
        case 72: 
          { return symbol(REMOVE_GUARDED_BY_PC);
          }
        case 117: break;
        case 54: 
          { return symbol(EDGE_TYPE, PDGEdgeType.CONJUNCTION);
          }
        case 118: break;
        case 41: 
          { return symbol(POSITION);
          }
        case 119: break;
        case 20: 
          { return symbol(BOOL_OR);
          }
        case 120: break;
        case 63: 
          { return symbol(NODE_TYPE, PDGNodeType.FORMAL_SUMMARY);
          }
        case 121: break;
        case 26: 
          { return symbol(PDG);
          }
        case 122: break;
        case 49: 
          { return symbol(NODE_TYPE, PDGNodeType.OUTPUT);
          }
        case 123: break;
        case 62: 
          { return symbol(NODES_IN_CONTEXT);
          }
        case 124: break;
        case 29: 
          { return symbol(EDGE_TYPE, PDGEdgeType.COPY);
          }
        case 125: break;
        case 15: 
          { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL,
                                   string.toString());
          }
        case 126: break;
        case 57: 
          { return symbol(SHORTEST_PATH);
          }
        case 127: break;
        case 1: 
          { error("Illegal character <"+ yytext()+">");
          }
        case 128: break;
        case 74: 
          { return symbol(REMOVE_GUARDED_BY_BOOL);
          }
        case 129: break;
        case 56: 
          { return symbol(FOR_PROCEDURE);
          }
        case 130: break;
        case 13: 
          { return symbol(RBRACK);
          }
        case 131: break;
        case 37: 
          { return symbol(EDGE_TYPE, PDGEdgeType.POINTER);
          }
        case 132: break;
        case 52: 
          { return symbol(SELECT_NODES);
          }
        case 133: break;
        case 67: 
          { return symbol(NODE_TYPE, PDGNodeType.BOOLEAN_TRUE_PC);
          }
        case 134: break;
        case 16: 
          { string.append('\\');
          }
        case 135: break;
        case 9: 
          { return symbol(DOT);
          }
        case 136: break;
        case 27: 
          { return symbol(AND);
          }
        case 137: break;
        case 31: 
          { return symbol(NODE_TYPE, PDGNodeType.THIS);
          }
        case 138: break;
        case 4: 
          { return symbol(IDENTIFIER, yytext().intern());
          }
        case 139: break;
        case 2: 
          { /* ignore */
          }
        case 140: break;
        case 32: 
          { return symbol(EDGE_TYPE, PDGEdgeType.INPUT);
          }
        case 141: break;
        case 40: 
          { return symbol(NODE_BY_ID);
          }
        case 142: break;
        case 12: 
          { return symbol(LBRACK);
          }
        case 143: break;
        case 14: 
          { string.append( yytext() );
          }
        case 144: break;
        case 66: 
          { return symbol(NODE_TYPE, PDGNodeType.EXIT_PC_SUMMARY);
          }
        case 145: break;
        case 33: 
          { return symbol(NODE_TYPE, PDGNodeType.LOCAL);
          }
        case 146: break;
        case 25: 
          { return symbol(LET);
          }
        case 147: break;
        case 6: 
          { return symbol(COMMA);
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
